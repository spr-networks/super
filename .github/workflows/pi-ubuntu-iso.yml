name: PI Ubuntu ISO Installer

on:
  workflow_run:
    workflows: ["Docker Image CI"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  attestations: write
  contents: write

jobs:
  build_iso:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Fetch tags
        run:  git fetch --tags
      - name: Get version from git
        run: echo "RELEASE_VERSION_TAG=$(git tag --contains $(git rev-parse HEAD) | grep -v clearfog)" >> $GITHUB_ENV
      - name: Authenticate to ghcr
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Set up Qemu emulation
        run: ./installer/qemu-setup-linux.sh
      - name: Set up Upstream DOcker
        run: sudo ./installer/upstream-docker.sh
      - name: Download the image
        working-directory: ./installer
        run: ./pi-download-image.sh
      - name: Build install image
        working-directory: ./installer
        run: sudo ./pi-arm64-image-build.sh
      - name: Compress image
        run: sudo xz ./installer/data/spr.img
      - name: Create Release
        id: create_release
        if: ${{ github.ref_name == 'main' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: Release ${{ env.RELEASE_VERSION_TAG }}
          tag_name: ${{ env.RELEASE_VERSION_TAG }}
          draft: false
          prerelease: false
      - name: Attest ISO Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "./installer/data/spr.img.xz"
          subject-name: "spr.img.xz"
      - name: Upload Release Asset
        if: ${{ github.ref_name == 'main' }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./installer/data/spr.img.xz
          asset_name: spr.img.xz
          asset_content_type: application/x-xz
