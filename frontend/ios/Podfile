require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, '13.0'
install! 'cocoapods', :deterministic_uuids => false

target 'spr' do
  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # to enable hermes on iOS, change `false` to `true` and then install pods
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => flags[:fabric_enabled],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'sprTests' do
    inherit! :complete
    # Pods for testing
  end

  # Enables Flipper.
  #
  # Note that if you have use_frameworks! enabled, Flipper will not work and
  # you should disable the next line.
  use_flipper!()

  # Fix Xcode 14 warnings like:
  # warning: Run script build phase '[CP] Copy XCFrameworks' will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking "Based on dependency analysis" in the script phase. (in target 'ATargetNameHere' from project 'YourProjectName')
  # Ref.: https://github.com/CocoaPods/CocoaPods/issues/11444
  def set_run_script_to_always_run_when_no_input_or_output_files_exist(project:)
    project.targets.each do |target|
      run_script_build_phases = target.build_phases.filter { |phase| phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase) }
      cocoapods_run_script_build_phases = run_script_build_phases.filter { |phase| phase.name.start_with?("[CP]") }
      cocoapods_run_script_build_phases.each do |run_script|
        next unless (run_script.input_paths || []).empty? && (run_script.output_paths || []).empty?
        run_script.always_out_of_date = "1"
      end
    end
    project.save
  end

  post_integrate do |installer|
    main_project = installer.aggregate_targets[0].user_project
    set_run_script_to_always_run_when_no_input_or_output_files_exist(project: main_project)
  end

  post_install do |installer|
    react_native_post_install(installer)
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
    set_run_script_to_always_run_when_no_input_or_output_files_exist(project: installer.pods_project)
  end
end
